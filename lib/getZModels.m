function [outFunc,storageFunc,lossFunc] = getZModels(model,n_terms,alphaInit)
%GETZMODELS Create the Generalized Viscoelastic Models' Harmonic Functions
%   This function takes in a viscoelastic model name, the number of terms
%   in the viscoelastic model, the alpha used for the modified Fourier
%   Transform (i.e. Z-Transform radius), and the timestep from the
%   experiment.
%
%   model: (string) Viscoelastic model name. Options include "maxwell" and
%           "voigt".
%
%   n_terms: (integer) Number of terms in the viscoelastic model.
%
%   alphaInit: (double) Radius for the Z-Transform method.
%

switch lower(model)
    case 'maxwell'
        if n_terms > 0
%             storageFunc = @(c,omega) sum(c(1:2:end)) - ...
%                 sum( (c(3:2:end).*repmat(ones(size(omega)),n_terms,1).*(((1+(c(4:2:end)./dt).*alphaInit).^2) ./ ...
%                 ((c(4:2:end)./dt).^2))) ... 
%                 ./ ( ((1+(c(4:2:end)./dt).*alphaInit).*repmat(ones(size(omega)),n_terms,1)) .* ...
%                 ((((1+(c(4:2:end)./dt).*alphaInit).^2)./((c(4:2:end)./dt).^2)).*repmat(ones(size(omega)),n_terms,1) + repmat(omega.^2,n_terms,1)))...
%                 , 1);

%             storageFunc = @(c,omega) sum(c(1:2:end)) - ...
%                 sum( ( (c(3:2:end).*repmat(ones(size(omega)),n_terms,1)) ./ ((1 + alphaInit.*((c(4:2:end)./dt).^2)).*repmat(ones(size(omega)),n_terms,1)) ) ... 
%                 .* ( ((((1+(c(4:2:end)./dt).*alphaInit).*repmat(ones(size(omega)),n_terms,1)).^2) ./ ((c(4:2:end)./dt).^2).*repmat(ones(size(omega)),n_terms,1)) ...
%                 ./ (((((1+(c(4:2:end)./dt).*alphaInit).*repmat(ones(size(omega)),n_terms,1)).^2) ./ ((c(4:2:end)./dt).^2).*repmat(ones(size(omega)),n_terms,1)) ...
%                 + repmat(omega.^2,n_terms,1)) )...
%                 , 1);
            
%             lossFunc = @(c,omega) sum( repmat(omega,n_terms,1).*(c(3:2:end).*(c(4:2:end)./dt).*repmat(ones(size(omega)),n_terms,1) .* ...
%                 (((1+(c(4:2:end)./dt).*alphaInit).^2)./((c(4:2:end)./dt).^2))) ./ ...
%                 ((((1+(c(4:2:end)./dt).*alphaInit).^2).*repmat(ones(size(omega)),n_terms,1)) .* ...
%                 ((((1+(c(4:2:end)./dt).*alphaInit).^2)./((c(4:2:end)./dt).^2)).*repmat(ones(size(omega)),n_terms,1) + repmat(omega.^2,n_terms,1)))...
%                 , 1);

%             lossFunc = @(c,omega) ...
%                 sum( repmat(omega,n_terms,1) ...
%                 .* ( (c(3:2:end).*c(4:2:end).*repmat(ones(size(omega)),n_terms,1)) ./ ((1 + alphaInit.*((c(4:2:end)./dt).^2)).*repmat(ones(size(omega)),n_terms,1)) ) ... 
%                 .* ( ((((1+(c(4:2:end)./dt).*alphaInit).*repmat(ones(size(omega)),n_terms,1)).^2) ./ ((c(4:2:end)./dt).^2).*repmat(ones(size(omega)),n_terms,1)) ...
%                 ./ (((((1+(c(4:2:end)./dt).*alphaInit).*repmat(ones(size(omega)),n_terms,1)).^2) ./ ((c(4:2:end)./dt).^2).*repmat(ones(size(omega)),n_terms,1)) ...
%                 + repmat(omega.^2,n_terms,1)) )...
%                 , 1);
            
            outFunc = @(c,omega) sum(c(1:2:end)) - ...
                sum( (c(3:2:end).*repmat(ones(size(omega)),n_terms,1)) ./ ...
                ( 1 + c(4:2:end) .* (1 - exp(-1j.*repmat(omega,n_terms,1)) .* exp(-log(1+alphaInit))) )...
                , 1);
            storageFunc = @(c,omega) real(outFunc(c,omega));
            lossFunc = @(c,omega) imag(outFunc(c,omega));

        else
            outFunc = @(c,omega) c(1).*ones(size(omega));
            storageFunc = @(c,omega) c(1).*ones(size(omega));
            lossFunc = @(c,omega) zeros(size(omega));
        end
        
    case 'voigt'
        if n_terms > 0
%             storageFunc = @(c,omega) sum(c(1:2:end)) - ...
%                 sum( (c(3:2:end).*repmat(ones(size(omega)),n_terms,1).*(((1+(c(4:2:end)./dt).*alphaInit).^2) ./ ...
%                 ((c(4:2:end)./dt).^2))) ... 
%                 ./ ( ((1+(c(4:2:end)./dt).*alphaInit).*repmat(ones(size(omega)),n_terms,1)) .* ...
%                 ((((1+(c(4:2:end)./dt).*alphaInit).^2)./((c(4:2:end)./dt).^2)).*repmat(ones(size(omega)),n_terms,1) + repmat(omega.^2,n_terms,1)))...
%                 , 1);

%             storageFunc = @(c,omega) c(1) - ...
%                 sum( ( (c(3:2:end).*repmat(ones(size(omega)),n_terms,1)) ./ ((1 + alphaInit.*((c(4:2:end)./dt).^2)).*repmat(ones(size(omega)),n_terms,1)) ) ... 
%                 .* ( ((((1+(c(4:2:end)./dt).*alphaInit).*repmat(ones(size(omega)),n_terms,1)).^2) ./ ((c(4:2:end)./dt).^2).*repmat(ones(size(omega)),n_terms,1)) ...
%                 ./ (((((1+(c(4:2:end)./dt).*alphaInit).*repmat(ones(size(omega)),n_terms,1)).^2) ./ ((c(4:2:end)./dt).^2).*repmat(ones(size(omega)),n_terms,1)) ...
%                 + repmat(omega.^2,n_terms,1)) )...
%                 , 1);
            
%             lossFunc = @(c,omega) sum( repmat(omega,n_terms,1).*(c(3:2:end).*(c(4:2:end)./dt).*repmat(ones(size(omega)),n_terms,1) .* ...
%                 (((1+(c(4:2:end)./dt).*alphaInit).^2)./((c(4:2:end)./dt).^2))) ./ ...
%                 ((((1+(c(4:2:end)./dt).*alphaInit).^2).*repmat(ones(size(omega)),n_terms,1)) .* ...
%                 ((((1+(c(4:2:end)./dt).*alphaInit).^2)./((c(4:2:end)./dt).^2)).*repmat(ones(size(omega)),n_terms,1) + repmat(omega.^2,n_terms,1)))...
%                 , 1);

%             lossFunc = @(c,omega) ...
%                 sum( repmat(omega,n_terms,1) ...
%                 .* ( (c(3:2:end).*c(4:2:end).*repmat(ones(size(omega)),n_terms,1)) ./ ((1 + alphaInit.*((c(4:2:end)./dt).^2)).*repmat(ones(size(omega)),n_terms,1)) ) ... 
%                 .* ( ((((1+(c(4:2:end)./dt).*alphaInit).*repmat(ones(size(omega)),n_terms,1)).^2) ./ ((c(4:2:end)./dt).^2).*repmat(ones(size(omega)),n_terms,1)) ...
%                 ./ (((((1+(c(4:2:end)./dt).*alphaInit).*repmat(ones(size(omega)),n_terms,1)).^2) ./ ((c(4:2:end)./dt).^2).*repmat(ones(size(omega)),n_terms,1)) ...
%                 + repmat(omega.^2,n_terms,1)) )...
%                 , 1);
            
            outFunc = @(c,omega) c(1) + ...
                sum( (c(3:2:end).*repmat(ones(size(omega)),n_terms,1)) ./ ...
                (1 + c(4:2:end).*(1 - exp(-1j.*repmat(omega,n_terms,1)).*exp(-log(1+alphaInit))))...
                , 1);
            storageFunc = @(c,omega) real(outFunc(c,omega));
            lossFunc = @(c,omega) imag(outFunc(c,omega));
            
        else
            outFunc = @(c,omega) c(1).*ones(size(omega));
            storageFunc = @(c,omega) c(1).*ones(size(omega));
            lossFunc = @(c,omega) zeros(size(omega));
        end
        
end

end

